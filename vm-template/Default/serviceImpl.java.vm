## 引入自定义变量及宏定义
$!init
$!define

## 设置文件保存路径
#save($serviceImplClassSavePath, $serviceImplClassName, ".java")

## 定义包路径
$tool.charSeqJoin(".", "package ", ";", false, $tableInfo.savePackageName, $serviceImplPackage)

$tool.charSeqJoin(".", "import ", ";", false, $tableInfo.savePackageName, $servicePackage, $serviceClassName)
$tool.charSeqJoin(".", "import ", ";", false, $tableInfo.savePackageName, $managerPackage, $managerClassName)
$tool.charSeqJoin(".", "import ", ";", false, $tableInfo.savePackageName, $entityPackage, $entityClassName)
$tool.charSeqJoin(".", "import ", ";", false, $tableInfo.savePackageName, $dtoPackage, $dtoClassName)
$tool.charSeqJoin(".", "import ", ";", false, $tableInfo.savePackageName, $assemblerPackage, $assemblerClassName)
import org.springframework.stereotype.Service;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.transaction.annotation.Transactional;
import java.util.List;
import java.util.stream.Collectors;

## 使用宏定义实现类注释信息
#classDescription("")
@Service
public class $serviceImplClassName implements $serviceClassName {
    @Autowired
    private $managerClassName $!{tool.firstLowerCase($managerClassName)};
    @Autowired
    private $assemblerClassName $!{tool.firstLowerCase($assemblerClassName)};

    @Override
    @Transactional(rollbackFor = Exception.class)
    public $dtoClassName add($dtoClassName $!{tool.firstLowerCase($dtoClassName)}) {
        $entityClassName $tool.firstLowerCase($entityClassName) = $!{tool.firstLowerCase($assemblerClassName)}.assemble($!{tool.firstLowerCase($dtoClassName)});
        int affectedRows = $!{tool.firstLowerCase($managerClassName)}.insert($!{tool.firstLowerCase($entityClassName)});
        return $!{tool.firstLowerCase($assemblerClassName)}.assembleDTO($!{tool.firstLowerCase($entityClassName)});
    }
#if(!$tableInfo.pkColumn.isEmpty())

    @Override
    @Transactional(rollbackFor = Exception.class)
    public int deleteByPk(#foreach($column in $tableInfo.pkColumn)$tool.getClsNameByFullName($column.type) $column.name#if($velocityHasNext), #end#end) {
        return $!{tool.firstLowerCase($managerClassName)}.deleteByPk(#foreach($column in $tableInfo.pkColumn)$column.name#if($velocityHasNext), #end#end);
    }
#end
#if(!$tableInfo.pkColumn.isEmpty())

    @Override
    @Transactional(rollbackFor = Exception.class)
    public int updateByPk($dtoClassName $!{tool.firstLowerCase($dtoClassName)}) {
        $entityClassName $tool.firstLowerCase($entityClassName) = $!{tool.firstLowerCase($assemblerClassName)}.assemble($!{tool.firstLowerCase($dtoClassName)});
        return $!{tool.firstLowerCase($managerClassName)}.updateByPk($!{tool.firstLowerCase($entityClassName)});
    }
#end
#if(!$tableInfo.pkColumn.isEmpty())

    @Override
    public $dtoClassName queryByPk(#foreach($column in $tableInfo.pkColumn)$tool.getClsNameByFullName($column.type) $column.name#if($velocityHasNext), #end#end) {
        $entityClassName $tool.firstLowerCase($entityClassName) = $!{tool.firstLowerCase($managerClassName)}.selectByPk(#foreach($column in $tableInfo.pkColumn)$column.name#if($velocityHasNext), #end#end);
        return $!{tool.firstLowerCase($assemblerClassName)}.assembleDTO($!{tool.firstLowerCase($entityClassName)});
    }
#end

    @Override
    public List<$!{dtoClassName}> queryAll(Object params) {
        List<$!{entityClassName}> $!{tool.firstLowerCase($entityClassName)}s = $!{tool.firstLowerCase($managerClassName)}.selectAll(params);
        return $!{tool.firstLowerCase($entityClassName)}s.stream().map($!{tool.firstLowerCase($assemblerClassName)}::assembleDTO).collect(Collectors.toList());
    }
}