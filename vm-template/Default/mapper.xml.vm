## 引入自定义变量、宏定义及MyBatis支持
$!init
$!define
$!mybatisSupport

## 不要格式化代码(默认为true)
$callback.setReformat(false)

## 设置保存名称与保存位置
$!callback.setSavePath($tool.append($modulePath, "/src/main/resources", "/mapper"))
$!callback.setFileName($tool.append($mapperClassName, ".xml"))

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="$tool.charSeqJoin('.', '', '', false, $!{tableInfo.savePackageName}, $!{mapperPackage}, $!{mapperClassName})">

  <resultMap id="BaseResultMap" type="$tool.charSeqJoin('.', '', '', false, $!{tableInfo.savePackageName}, $!{entityPackage}, $!{entityClassName})">
#foreach($column in $tableInfo.pkColumn)
    <id column="$!{column.obj.name}" property="$!{column.name}" jdbcType="$!{column.ext.jdbcType}"/>
#end
#foreach($column in $tableInfo.otherColumn)
    <result column="$!{column.obj.name}" property="$!{column.name}" jdbcType="$!{column.ext.jdbcType}"/>
#end
  </resultMap>

  <sql id="Base_Column_List">
#printAllColumn("    ", 5)
  </sql>

  <!-- 新增 -->
  <insert id="insert" parameterType="$tool.charSeqJoin('.', '', '', false, $!{tableInfo.savePackageName}, $!{entityPackage}, $!{entityClassName})">
    insert into $!{tableInfo.obj.name} (
#printAllColumn("      ", 5)
    )
    values (
#printAllField("      ", 5)
    )
  </insert>

  <!-- 有选择的新增 -->
  <insert id="insertSelective" parameterType="$tool.charSeqJoin('.', '', '', false, $!{tableInfo.savePackageName}, $!{entityPackage}, $!{entityClassName})">
    insert into $!{tableInfo.obj.name}
    <trim prefix="(" suffix=")" suffixOverrides=",">
#foreach($column in $tableInfo.fullColumn)
      <if test="${column.name} != null#if($column.type.equals("java.lang.String")) and $!column.name != ''#end">
        `$!{column.obj.name}`,
      </if>
#end
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
#foreach($column in $tableInfo.fullColumn)
      <if test="${column.name} != null#if($column.type.equals("java.lang.String")) and $!column.name != ''#end">
        #{$!{column.name},jdbcType=$!{column.ext.jdbcType}},
      </if>
#end
    </trim>
  </insert>

  <!-- 批量新增 -->
  <insert id="batchInsert" parameterType="java.util.Collection">
    insert into $!{tableInfo.obj.name} (
#printAllColumn("      ", 5)
    )
    values
    <foreach collection="list" index="index" item="item" open="" close="" separator=",">
      (
#foreach($column in $tableInfo.fullColumn)
        #{item.$!{column.name},jdbcType=$!{column.ext.jdbcType}}#if($velocityHasNext), #end#println("")
#end
      )
    </foreach>
  </insert>
#if($allowMultiQueries)

  <!-- 批量有选择的新增 -->
  <insert id="batchInsertSelective" parameterType="java.util.Collection">
    <foreach collection="list" index="index" item="item" open="" close="" separator=";">
      insert into $!{tableInfo.obj.name}
      <trim prefix="(" suffix=")" suffixOverrides=",">
#foreach($column in $tableInfo.fullColumn)
        <if test="item.${column.name} != null#if($column.type.equals("java.lang.String")) and item.$!{column.name} != ''#end">
          `$!{column.obj.name}`,
        </if>
#end
      </trim>
      <trim prefix="values (" suffix=")" suffixOverrides=",">
#foreach($column in $tableInfo.fullColumn)
        <if test="item.${column.name} != null#if($column.type.equals("java.lang.String")) and item.$!{column.name} != ''#end">
          #{item.$!{column.name},jdbcType=$!{column.ext.jdbcType}},
        </if>
#end
      </trim>
    </foreach>
  </insert>
#end
#if(!$tableInfo.pkColumn.isEmpty())

  <!-- 根据主键进行删除 -->
  <delete id="deleteByPk">
    delete from $!{tableInfo.obj.name}
    where #foreach($column in $tableInfo.pkColumn)`$!{column.obj.name}` = #{$!{column.name},jdbcType=$!{column.ext.jdbcType}}#if($velocityHasNext) and #end#end#println("")
  </delete>
#end
#if(!$tableInfo.pkColumn.isEmpty())

  <!-- 根据主键进行更新 -->
  <update id="updateByPk" parameterType="$!{tableInfo.savePackageName}.$!{entityPackage}.$!{entityClassName}">
    update $!{tableInfo.obj.name}
    set
#foreach($column in $tableInfo.otherColumn)
      `$!{column.obj.name}` = #{$!{column.name},jdbcType=$!{column.ext.jdbcType}}#if($velocityHasNext),#end#println("")
#end
    where #foreach($column in $tableInfo.pkColumn)`$!{column.obj.name}` = #{$!{column.name},jdbcType=$!{column.ext.jdbcType}}#if($velocityHasNext) and #end#end#println("")
  </update>
#end
#if(!$tableInfo.pkColumn.isEmpty())

  <!-- 根据主键有选择的更新 -->
  <update id="updateSelectiveByPk" parameterType="$tool.charSeqJoin('.', '', '', false, $!{tableInfo.savePackageName}, $!{entityPackage}, $!{entityClassName})">
    update $!{tableInfo.obj.name}
    <set>
#foreach($column in $tableInfo.otherColumn)
      <if test="${column.name} != null#if($column.type.equals("java.lang.String")) and $!{column.name} != ''#end">
        `$!{column.obj.name}` = #{$!{column.name},jdbcType=$!{column.ext.jdbcType}},
      </if>
#end
    </set>
    where #foreach($column in $tableInfo.pkColumn)`$!{column.obj.name}` = #{$!{column.name},jdbcType=$!{column.ext.jdbcType}}#if($velocityHasNext) and #end#end#println("")
  </update>
#end
#if(!$tableInfo.pkColumn.isEmpty() && $allowMultiQueries)

  <!-- 根据主键批量更新 -->
  <update id="batchUpdateByPk" parameterType="java.util.Collection">
    <foreach collection="list" index="index" item="item" open="" close="" separator=";">
      update $!{tableInfo.obj.name}
      set
#foreach($column in $tableInfo.otherColumn)
        `$!{column.obj.name}` = #{item.$!{column.name},jdbcType=$!{column.ext.jdbcType}}#if($velocityHasNext),#end#println("")
#end
      where #foreach($column in $tableInfo.pkColumn)`$!{column.obj.name}` = #{item.$!{column.name},jdbcType=$!{column.ext.jdbcType}}#if($velocityHasNext) and #end#end#println("")
    </foreach>
  </update>
#end
#if(!$tableInfo.pkColumn.isEmpty() && $allowMultiQueries)

  <!-- 根据主键批量有选择的更新 -->
  <update id="batchUpdateSelectiveByPk" parameterType="java.util.Collection">
    <foreach collection="list" index="index" item="item" open="" close="" separator=";">
      update $!{tableInfo.obj.name}
      <set>
#foreach($column in $tableInfo.otherColumn)
        <if test="item.${column.name} != null#if($column.type.equals("java.lang.String")) and item.$!{column.name} != ''#end">
          `$!{column.obj.name}` = #{item.$!{column.name},jdbcType=$!{column.ext.jdbcType}},
        </if>
#end
      </set>
      where #foreach($column in $tableInfo.pkColumn)`$!{column.obj.name}` = #{item.$!{column.name},jdbcType=$!{column.ext.jdbcType}}#if($velocityHasNext) and #end#end#println("")
    </foreach>
  </update>
#end
#if(!$tableInfo.pkColumn.isEmpty())

  <!-- 根据主键查询 -->
  <select id="selectByPk" resultMap="BaseResultMap">
    select
      <include refid="Base_Column_List" />
    from $!tableInfo.obj.name
    where #foreach($column in $tableInfo.pkColumn)`$!{column.obj.name}` = #{$!{column.name},jdbcType=$!{column.ext.jdbcType}}#if($velocityHasNext) and #end#end#println("")
  </select>
#end

  <select id="selectAll" parameterType="java.lang.Object" resultMap="BaseResultMap">
    select
      <include refid="Base_Column_List" />
    from $!tableInfo.obj.name
    <where>
#foreach($column in $tableInfo.fullColumn)
      <if test="${column.name} != null#if($column.type.equals("java.lang.String")) and $!{column.name} != ''#end">
        and `$!{column.obj.name}` = #{$!{column.name},jdbcType=$!{column.ext.jdbcType}}
      </if>
#end
    </where>
  </select>
</mapper>